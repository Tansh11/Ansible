- name: OS Patching with Logging, Rollback & Enhancements
 hosts: all
 become: yes
 vars:
 patch_report: "/tmp/os_patch_report_{{ inventory_hostname }}.csv"
 pre_check_report: "/tmp/pre_check_{{ inventory_hostname }}.txt"
 post_check_report: "/tmp/post_check_{{ inventory_hostname }}.txt"
 remote_log_server: "192.168.1.200" # Replace with actual log server IP
 rollback_enabled: yes
 snapshot_name: "pre_patch_{{ ansible_date_time.epoch }}"
 batch_size: 2 # Define batch size for sequential patching
 
 serial: "{{ batch_size }}"
 
 tasks:
 # Step 1: Pre-Check System State
 - name: Capture system info before patching
 shell: |
 echo "Hostname: $(hostname)" > {{ pre_check_report }}
 echo "Kernel Version: $(uname -r)" >> {{ pre_check_report }}
 echo "Uptime: $(uptime)" >> {{ pre_check_report }}
 echo "Disk Usage:" >> {{ pre_check_report }}
 df -h >> {{ pre_check_report }}
 echo "RAM Usage:" >> {{ pre_check_report }}
 free -h >> {{ pre_check_report }}
 register: pre_check_result
 
 - name: Install Timeshift on Ubuntu (if missing)
 apt:
 name: timeshift
 state: present
 when: ansible_os_family == "Debian"
 
 - name: Send pre-check logs to remote syslog
 shell: "cat {{ pre_check_report }} | logger -n {{ remote_log_server }} -P 514"
 
 # Step 2: Check available disk space before patching
 - name: Check available disk space
 shell: df -h / | awk 'NR==2 {print $5}' | tr -d '%'
 register: disk_usage
 
 - name: Fail if disk space is low
 fail:
 msg: "Disk space is low, only {{ disk_usage.stdout }}% left!"
 when: disk_usage.stdout|int > 85
 
 # Step 3: Create a Pre-Patch Snapshot (Rollback Point)
 - name: Create Ubuntu Snapshot (if rollback enabled)
 command: timeshift --create --comments "{{ snapshot_name }}"
 when: ansible_os_family == "Debian" and rollback_enabled
 
 - name: Create RHEL Snapshot (if rollback enabled)
 shell: lvcreate -s -n patch_snapshot -L 5G /dev/mapper/rhel-root
 when: ansible_os_family == "RedHat" and rollback_enabled
 
 # Step 4: Simulate Updates (Dry Run Mode)
 - name: Simulate Ubuntu Updates
 shell: apt-get -s upgrade | grep -E "linux-|systemd"
 register: ubuntu_simulation
 when: ansible_os_family == "Debian"
 
 - name: Simulate RHEL Updates
 shell: yum updateinfo list security
 register: rhel_simulation
 when: ansible_os_family == "RedHat"
 
 - name: Save Ubuntu Simulation Report
 copy:
 content: "{{ ubuntu_simulation.stdout }}"
 dest: "/tmp/ubuntu_simulation_{{ inventory_hostname }}.log"
 when: ansible_os_family == "Debian"
 
 - name: Save RHEL Simulation Report
 copy:
 content: "{{ rhel_simulation.stdout }}"
 dest: "/tmp/rhel_simulation_{{ inventory_hostname }}.log"
 when: ansible_os_family == "RedHat"
 
 # Step 5: Apply System Updates with Retry Mechanism
 - name: Apply Ubuntu security updates
 apt:
 upgrade: "yes"
 update_cache: yes
 retries: 3
 delay: 30
 when: ansible_os_family == "Debian"
 
 - name: Apply RHEL security updates
 yum:
 name: "*"
 state: latest
 security: yes
 retries: 3
 delay: 30
 when: ansible_os_family == "RedHat"
 
 # Step 6: Check if Reboot is Needed
 - name: Check if reboot is required (Ubuntu)
 stat:
 path: /var/run/reboot-required
 register: reboot_required
 when: ansible_os_family == "Debian"
 
 - name: Check if reboot is required (RHEL)
 shell: "needs-restarting -r"
 register: reboot_required_rhel
 failed_when: false
 when: ansible_os_family == "RedHat"
 
 # Step 7: Restart the VM if Required
 - name: Reboot Ubuntu if needed
 reboot:
 reboot_timeout: 600
 when: reboot_required.stat.exists and ansible_os_family == "Debian"
 
 - name: Reboot RHEL if needed
 reboot:
 reboot_timeout: 600
 when: reboot_required_rhel.rc == 1 and ansible_os_family == "RedHat"
 
 # Step 8: Post-Check System State
 - name: Capture system info after patching
 shell: |
 echo "Hostname: $(hostname)" > {{ post_check_report }}
 echo "Kernel Version: $(uname -r)" >> {{ post_check_report }}
 echo "Uptime: $(uptime)" >> {{ post_check_report }}
 df -h >> {{ post_check_report }}
 free -h >> {{ post_check_report }}
 register: post_check_result
 
 - name: Send post-check logs to remote syslog
 shell: "cat {{ post_check_report }} | logger -n {{ remote_log_server }} -P 514"
 
 # Step 9: Compare Kernel Versions Before and After Patching
 - name: Compare Kernel Versions Before and After Patching
 shell: uname -r
 register: new_kernel_version
 
 - name: Validate Kernel Update
 fail:
 msg: "Kernel did not update! Current: {{ pre_check_result.stdout_lines[1] }}, After Patching: {{ new_kernel_version.stdout }}"
 when: pre_check_result.stdout_lines[1] == new_kernel_version.stdout
 
 # Step 10: Detect Failures & Rollback
 - name: Check for failed systemd services
 command: systemctl --failed
 register: failed_services
 
 - name: Trigger rollback if services failed (Ubuntu)
 command: timeshift --restore --snapshot "{{ snapshot_name }}"
 when: ansible_os_family == "Debian" and rollback_enabled and failed_services.stdout | length > 0
 
 - name: Trigger rollback if services failed (RHEL)
 shell: lvconvert --merge /dev/mapper/rhel-root
 when: ansible_os_family == "RedHat" and rollback_enabled and failed_services.stdout | length > 0
 
